// optimal 
class Solution {
    public int bitwiseComplement(int n) {
        if (n == 0) return 1;
        int mask = 0;

        int num = n;
        while(num!=0)
        {
            mask = mask << 1 | 1;
            num = num >> 1;
        }
        return (~n) & mask;
    }
}



//my solution 
class Solution {
    public int bitwiseComplement(int n) {
        if (n == 0) return 1;
        String binary = "";
        while(n!=0){
            int lastBit = n & 1;
            int Complement = lastBit==0 ? 1 : 0; 
            binary = Complement + binary;
            n = n>>1; 
        }
        return Integer.parseInt(binary, 2);
    }
}


// two pomgdf
// Input: nums = [1,1,2]
// Output: 2, nums = [1,2,_]
// Input: nums = [0,0,1,1,1,2,2,3,3,4]                     
// Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
class Solution {
    public int removeDuplicates(int[] nums) {
        int count = 1;
        for(int i=1;i<nums.length;i++){
            if(nums[i] != nums[i-1]){
                nums[count] = nums[i];
                count++;
            }
        }
        return count;
    }
}
